#include <stdlib.h>
#include <stdio.h>
#include "infero/api/infero.h"
#include "eckit/testing/Test.h"

using namespace eckit::testing;


CASE("infero_handle"){

    char* arg1 = (char*)"arg1";
    char** args;
    args = &arg1;
    int argc = 1;
    int err;

    const char* cfg_valid = "path: @CMAKE_BINARY_DIR@/tests/data/mimo_model/mimo_model_tf\ntype: tf_c";
    const char* cfg_invalid_path = "path: /non/existent/model\ntype: tf_c";
    const char* cfg_invalid_type = "path: @CMAKE_BINARY_DIR@/tests/data/mimo_model/mimo_model_tf\ntype: invalid-engine";
    const char* cfg_empty = "";

    infero_handle_t* h;
    
    err = infero_initialise(argc, args);
    EXPECT_EQUAL(err, INFERO_SUCCESS);

    // config with empty path
    err = infero_create_handle_from_yaml_str(cfg_empty, &h);
    EXPECT_EQUAL(err , INFERO_ERROR_GENERAL_EXCEPTION);
    EXPECT_EQUAL(h , 0);

    // config with invalid path
    err = infero_create_handle_from_yaml_str(cfg_invalid_path, &h);
    EXPECT_EQUAL(err , INFERO_ERROR_GENERAL_EXCEPTION);
    EXPECT_EQUAL(h , 0);

    // config with invalid engine type
    err = infero_create_handle_from_yaml_str(cfg_invalid_type, &h);
    EXPECT_EQUAL(err , INFERO_ERROR_GENERAL_EXCEPTION);
    EXPECT_EQUAL(h , 0);

    // valid config
    err = infero_create_handle_from_yaml_str(cfg_valid, &h);
    EXPECT_EQUAL(err , INFERO_SUCCESS);
    
    err = infero_delete_handle(h);
    EXPECT_EQUAL(err, INFERO_SUCCESS);

    EXPECT_EQUAL(infero_finalise(), INFERO_SUCCESS);
    EXPECT_EQUAL(err, INFERO_SUCCESS);
     
}


int main(int argc, char* argv[]) {
    return run_tests(argc, argv);
}